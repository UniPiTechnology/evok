#!/bin/sh -e

# Post-inst maintainer script of Evok package
# See Readme of the package for info about licensing.
# Maintainer: martyy <triska@unipi.technology>


# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#


# Source debconf library.
. /usr/share/debconf/confmodule

# ----------------------------------------------------------------------------------------
# Issue 0 - Resolve platform-specific config file - if not env variable exists, an auto-detection process
# based on cpu type is used instead.
# ----------------------------------------------------------------------------------------

if [ -z "${UNIPI_INSTALL_FOR}" ]; then
    HWPROC=$(cat /proc/cpuinfo | grep '^Hardware' | sed 's/^.*: //')
    [ -z "${HWPROC}" ] && HWPROC=$(cat /sys/devices/soc0/soc_id)

    [ "${HWPROC}" = "Allwinnersun50iw2Family" ] && UNIPI_INSTALL_FOR="axon"
    [ "${HWPROC}" = "i.MX8MM" ] && UNIPI_INSTALL_FOR="patron"
    [ -z "${UNIPI_INSTALL_FOR}" ] && UNIPI_INSTALL_FOR="neuron"
fi

if [ "${UNIPI_INSTALL_FOR}" = "axon" ]; then  #Axon
    ucf --debconf-ok --verbose /tmp/evok.conf.axon /etc/evok.conf || true
    rm -f /tmp/evok.conf.axon  || true
    rm -f /tmp/evok.conf.patron  || true
elif [ "${UNIPI_INSTALL_FOR}" = "patron" ]; then
    ucf --debconf-ok --verbose /tmp/evok.conf.patron /etc/evok.conf || true
    rm -f /tmp/evok.conf.patron  || true
    rm -f /tmp/evok.conf.axon || true
elif [ "${UNIPI_INSTALL_FOR}" = "neuron" ]; then
    ucf --debconf-ok --verbose /tmp/evok.conf.neuron /etc/evok.conf || true
else
    echo "!!! Unsupported platform, default evok.conf file not installed !!!" >&2
fi
    echo "Using configuration file for unipi ${UNIPI_INSTALL_FOR}" >&2

# ----------------------------------------------------------------------------------------
# Issue 1 - Resolve nginx config files conflict - no more sites can share the same port 80
# ----------------------------------------------------------------------------------------

EVOK_NGINX_CONFILE="/etc/nginx/sites-available/evok"
EVOK_NGINX_CONFILE_ENABLED="/etc/nginx/sites-enabled/evok"

# Get conflict file(s) from the db filled during configuration operation
db_get evok/nginx_conflict_files || true
CONFLICT_CONFILE="$RET"

if ! [ -z "$CONFLICT_CONFILE" ]; then # If a conflict has occurred

    db_get evok/http_conflict || true

    #echo "The selected way of solution $RET" >&2

    case "$RET" in
      *replace*) # Option 1 - Remove conflicting configuration file
          echo "Removing conflict confile $CONFLICT_CONFILE" >&2
          db_get evok/http_conflict_makesure || true

          if [ -n "$DEBIAN_FRONTEND" -a "$DEBIAN_FRONTEND" = 'noninteractive' ]; then
              RET=true
          fi

          if [ "$RET" = true ] ; then
              rm "$CONFLICT_CONFILE"
          fi
          ;;
      *another*) # Option 2 -Change port number in Evok's ngninx confile
          db_get evok/control_website_port || true
          #echo "Changing port to $RET - is it OK?" >&2
          if [ -f "$EVOK_NGINX_CONFILE" ]; then
              sed -i "s/listen[[:space:]]*[[:digit:]]*/listen $RET/g" "$EVOK_NGINX_CONFILE"
          fi

          if [ -f "$EVOK_NGINX_CONFILE_ENABLED" ]; then
              sed -i "s/listen[[:space:]]*[[:digit:]]*/listen $RET/g" "$EVOK_NGINX_CONFILE_ENABLED"
          fi

          ;;
      *) # Option 3 - Remove Evok Nginx confile
         # All services provided by Nginx are disabled (incl. those proxy-ed) !!!
          #echo "DO NOT USE EVOK WEBSITE" >&2
          rm -f "$EVOK_NGINX_CONFILE_ENABLED"
          rm -f "$EVOK_NGINX_CONFILE"
          ;;
    esac
    #rm -f "/etc/nginx/sites-enabled/evok"
fi

# ----------------------------------------------------------------------------------------
# Issue 2 - Resolve kernel module conflict with owfs used by Evok internally
# ----------------------------------------------------------------------------------------

# Need for conflict resolution is invoked during the configure phase
db_get evok/kernel_ow_conflict_resolve || true

OVERLAY_CONFIG_FILE="/boot/config.txt" # Overlay config file on  RPi (Neuron series)

if "$RET"; then # OK

    if [ -f "$OVERLAY_CONFIG_FILE" ]; then # The issue is Neuron-related only (?)
        # echo "Disabling 1w master DS2482 on RPi platform..."
        sed -i "s/^[[:blank:]]*dtoverlay=ds2482/#dtoverlay=ds2482/g" "$OVERLAY_CONFIG_FILE"

    else # Disable 1w master on Axon series by proprietary bootcmd tool
        # echo "Disabling 1w master DS2482 on NanoPi platform..." >&2
        cd /etc/bootcmd.d/
        make disable-1wmaster
    fi
fi

# ----------------------------------------------------------------------------------------
# FINALLY - Start the service
# ----------------------------------------------------------------------------------------
if -f /opt/unipi/tools/os-configurator; then
  echo "Calling os-configurator update..." >&2
  /opt/unipi/tools/os-configurator -u
fi
systemctl start evok  || true
echo "Starting Evok..." >&2
systemctl start evok  || true
echo "Restarting nginx..." >&2
systemctl restart nginx || true

exit 0
